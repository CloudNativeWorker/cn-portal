{"version":3,"sources":["webpack:///./src/components/Widgets/CryptoPriceChart.vue","webpack:///src/components/Widgets/CryptoPriceChart.vue","webpack:///./src/components/Widgets/CryptoPriceChart.vue?0d28","webpack:///./src/components/Widgets/CryptoPriceChart.vue?906e","webpack:///./src/components/Widgets/CryptoPriceChart.vue?b9c1"],"names":["render","_vm","this","_c","_self","staticClass","attrs","chartId","staticRenderFns","mixins","WidgetMixin","ChartingMixin","components","data","chartData","chartDom","computed","asset","userChoice","options","numDays","usersChoice","currency","dataPoints","endpoint","concat","widgetApiEndpoints","cryptoPrices","Math","round","random","methods","generateChart","_this","Chart","title","type","height","chartHeight","colors","chartColors","truncateLegends","lineOptions","regionFill","hideDots","axisOptions","xIsSeries","xAxisMode","tooltipOptions","formatTooltipY","d","fetchData","_this2","axios","get","then","response","processData","chartingError","error","catch","dataFetchError","finally","finishLoading","_this3","priceChartData","priceLabels","interval","prices","length","showTime","tmpCounter","tmpTotal","incrementAverage","add","forEach","priceGroup","index","price","formatPrice","push","formatDate","labels","datasets","name","values","renderChart","timestamp","includeTime","localFormat","navigator","language","dateFormat","weekday","day","month","timeFormat","hour","minute","second","date","Date","toLocaleDateString","time","Intl","DateTimeFormat","format","numDecimals","toFixed","component"],"mappings":"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","file":"js/chunk-75cc9f4d.8f429d2d.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"crypto-price-chart\",attrs:{\"id\":_vm.chartId}})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n<div class=\"crypto-price-chart\" :id=\"chartId\"></div>\n</template>\n\n<script>\nimport { Chart } from 'frappe-charts/dist/frappe-charts.min.esm';\nimport axios from 'axios';\nimport WidgetMixin from '@/mixins/WidgetMixin';\nimport ChartingMixin from '@/mixins/ChartingMixin';\nimport { widgetApiEndpoints } from '@/utils/defaults';\n\nexport default {\n  mixins: [WidgetMixin, ChartingMixin],\n  components: {},\n  data() {\n    return {\n      chartData: null,\n      chartDom: null,\n    };\n  },\n  computed: {\n    /* The crypto asset to fetch price data for */\n    asset() {\n      const userChoice = this.options.asset;\n      if (typeof userChoice === 'string') return userChoice;\n      return 'bitcoin';\n    },\n    /* Number of days worth of history to fetch and display */\n    numDays() {\n      const userChoice = this.options.numDays;\n      if (typeof usersChoice === 'number' && userChoice < 30 && userChoice > 0.15) {\n        return userChoice;\n      }\n      return 7;\n    },\n    /* The fiat currency to calculate price data in */\n    currency() {\n      const userChoice = this.options.currency;\n      if (typeof userChoice === 'string') return userChoice;\n      return 'USD';\n    },\n    /* The number of data points to render on the chart */\n    dataPoints() {\n      const userChoice = this.options.dataPoints;\n      if (typeof usersChoice === 'number' && userChoice < 100 && userChoice > 5) {\n        return userChoice;\n      }\n      return 30;\n    },\n    /* The formatted GET request API endpoint to fetch crypto data from */\n    endpoint() {\n      return `${widgetApiEndpoints.cryptoPrices}${this.asset}/`\n      + `market_chart?vs_currency=${this.currency}&days=${this.numDays}`;\n    },\n    /* A sudo-random ID for the chart DOM element */\n    chartId() {\n      return `crypto-price-chart-${Math.round(Math.random() * 10000)}`;\n    },\n  },\n  methods: {\n    /* Create new chart, using the crypto data */\n    generateChart() {\n      return new Chart(`#${this.chartId}`, {\n        title: `${this.asset} Price Chart`,\n        data: this.chartData,\n        type: 'axis-mixed',\n        height: this.chartHeight,\n        colors: this.chartColors,\n        truncateLegends: true,\n        lineOptions: {\n          regionFill: 1,\n          hideDots: 1,\n        },\n        axisOptions: {\n          xIsSeries: true,\n          xAxisMode: 'tick',\n        },\n        tooltipOptions: {\n          formatTooltipY: d => `${d} ${this.currency}`,\n        },\n      });\n    },\n    /* Make GET request to CoinGecko API endpoint */\n    fetchData() {\n      axios.get(this.endpoint)\n        .then((response) => {\n          try {\n            this.processData(response.data);\n          } catch (chartingError) {\n            this.error('Unable to plot results on chart', chartingError);\n          }\n        })\n        .catch((dataFetchError) => {\n          this.error('Unable to fetch crypto data', dataFetchError);\n        })\n        .finally(() => {\n          this.finishLoading();\n        });\n    },\n    /* Generate price history in a format that can be consumed by the chart\n     * To improve efficiency, only a certain amount of data points are plotted\n     * depending on user preference. An average is then calculated between points\n     */\n    processData(data) {\n      const priceChartData = [];\n      const priceLabels = [];\n      const interval = Math.round(data.prices.length / this.dataPoints);\n      const showTime = this.numDays < 5;\n      // Counters for calculating averages between data points\n      let tmpCounter = 0; let tmpTotal = 0;\n      const incrementAverage = (add) => {\n        tmpCounter += 1; tmpTotal += add;\n        if (add === null) { tmpCounter = 0; tmpTotal = 0; }\n      };\n      // For each data point, calc average, and if interval is right, then append\n      data.prices.forEach((priceGroup, index) => {\n        incrementAverage(priceGroup[1]); // Increment averages\n        if (index % interval === 0) {\n          const price = this.formatPrice(tmpTotal / tmpCounter);\n          priceLabels.push(this.formatDate(priceGroup[0], showTime));\n          priceChartData.push(price);\n          incrementAverage(null); // Reset counter\n        }\n      });\n      // Combine results with chart config\n      this.chartData = {\n        labels: priceLabels,\n        datasets: [\n          {\n            name: 'Price',\n            type: 'bar',\n            values: priceChartData,\n          },\n        ],\n      };\n      // Call chart render function\n      this.renderChart();\n    },\n    /* Uses class data to render the line chart */\n    renderChart() {\n      this.chartDom = this.generateChart();\n    },\n    /* Format the date for a given time stamp, also include time if required */\n    formatDate(timestamp, includeTime) {\n      const localFormat = navigator.language;\n      const dateFormat = { weekday: 'short', day: 'numeric', month: 'short' };\n      const timeFormat = { hour: 'numeric', minute: 'numeric', second: 'numeric' };\n      const date = new Date(timestamp).toLocaleDateString(localFormat, dateFormat);\n      const time = Intl.DateTimeFormat(localFormat, timeFormat).format(timestamp);\n      return `${date} ${includeTime ? time : ''}`;\n    },\n    /* Format the price, rounding to given number of decimal places */\n    formatPrice(price) {\n      let numDecimals = 0;\n      if (price < 10) numDecimals = 1;\n      if (price < 1) numDecimals = 2;\n      if (price < 0.1) numDecimals = 3;\n      if (price < 0.01) numDecimals = 4;\n      if (price < 0.001) numDecimals = 5;\n      return price.toFixed(numDecimals);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.crypto-price-chart .chart-container {\n  text.title {\n    text-transform: capitalize;\n    color: var(--widget-text-color);\n  }\n  .axis, .chart-label {\n    fill: var(--widget-text-color);\n    opacity: var(--dimming-factor);\n    &:hover { opacity: 1; }\n  }\n}\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CryptoPriceChart.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CryptoPriceChart.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./CryptoPriceChart.vue?vue&type=template&id=a1a83d2c\"\nimport script from \"./CryptoPriceChart.vue?vue&type=script&lang=js\"\nexport * from \"./CryptoPriceChart.vue?vue&type=script&lang=js\"\nimport style0 from \"./CryptoPriceChart.vue?vue&type=style&index=0&id=a1a83d2c&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CryptoPriceChart.vue?vue&type=style&index=0&id=a1a83d2c&prod&lang=scss\""],"sourceRoot":""}